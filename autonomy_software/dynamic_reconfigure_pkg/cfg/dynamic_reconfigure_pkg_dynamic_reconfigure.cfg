#!/usr/bin/env python
PACKAGE = "dynamic_reconfigure_pkg"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# enums
# TODO ideally we should use the real enums and not replicating the logic here
velocity_mode_enum = gen.enum(
    [
        gen.const("MANUAL_INPUT_SPEED", int_t, 0, "Use speed entered manally on the corresponding topic"),
        gen.const("WAYPOINT_FOLLOWING", int_t, 1, "Use the speed from the waypoints"),
    ],
    "An enum to store the velocity modes",
)
longitudinal_control_mode_enum = gen.enum(
    [
        gen.const("ConstantPwmOutput", int_t, 0, "Send a constant PWM value"),
        gen.const("PID", int_t, 1, "Send a PWM value based on the PID controller output"),
    ],
    "An enum to store the longitudinal control modes",
)

# Level 0: the common params
gen.add("curvature_min", double_t, 0, "Min curvature considered by the target_generator node", 0.001, 0, 10)
gen.add("speed_scale_factor", double_t, 0, "Scaling factor for the speed from the waypoints", 1, 0.1, 5)
gen.add("loop_over_waypoints", bool_t, 0, "Whether to llop back to the first waypoint after the first", True)
gen.add("velocity_mode", int_t, 0, "The velocity mode", 1, 0, 1, edit_method=velocity_mode_enum)
gen.add("constant_pwm_output", int_t, 0, "Constant PWM value for the longitudinal controller", 90, 0, 180)
gen.add("longitudinal_control_mode", int_t, 0, "The longitudinal control mode", 1, 0, 1, edit_method=longitudinal_control_mode_enum)

# Level 1: the less common params
gen.add("jumping_message_nbr", int_t, 1, "number of messages to skip in the vehicle state publisher", 0, 0, 10)
gen.add("steering_idle_pwm", double_t, 1, "PWM value of the idle of the steering", 98, 0, 180)
gen.add("steering_max_pwm", double_t, 1, "PWM value of the max of the steering", 123, 0, 180)
gen.add("steering_min_pwm", double_t, 1, "PWM value of the min of the steering", 68, 0, 180)
gen.add("throttle_idle_autonomous_pwm", double_t, 1, "PWM value of the idle of the throttle", 90, 0, 180)
gen.add("throttle_max_autonomous_pwm", double_t, 1, "PWM value of the min of the throttle", 102, 0, 180)
gen.add("throttle_min_autonomous_pwm", double_t, 1, "PWM value of the min of the stethrottlering", 70, 0, 180)
gen.add("timeout_engage_msg_before_stop_secs", int_t, 1, "After how many seconds without message from car to deactivate", 1, 0, 10)

exit(gen.generate(PACKAGE, "dynamic_reconfigure_pkg", "dynamic_reconfigure_pkg_dynamic_reconfigure"))
